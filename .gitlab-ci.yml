variables:
  REPO_NAME: customer
  GO_VERSION: "1.14"

stages:
  - dep
  - test
  - build

dependencies:
  stage: dep
  image: golang:1.14-alpine3.11
  before_script:
    - apk add --no-cache curl git
    - go get -u github.com/golang/dep/cmd/dep
    - chmod +x /go/bin/dep
    - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
    - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
    - cd $GOPATH/src/$REPO_NAME
  script:
    - dep ensure -v -vendor-only
  artifacts:
    name: "vendor-$CI_PIPELINE_ID"
    paths:
      - vendor/
    expire_in: 10 hour

lint:
  stage: test
  dependencies:
    - dependencies
  image: golang:1.14
  before_script:
    - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
    - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
    - cd $GOPATH/src/$REPO_NAME
  script:
    - curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh| sh -s latest
    - ./bin/golangci-lint run --exclude-use-default=false --enable=golint --enable=gocyclo --enable=goconst --enable=unconvert 	./...

unit-test:
  stage: test
  dependencies:
    - dependencies
  image: golang:1.14
  before_script:
    - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
    - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
    - cd $GOPATH/src/$REPO_NAME
  script:
    - go get ./...

test-coverage:
  stage: test
  dependencies:
    - dependencies
  image: golang:1.14
  before_script:
    - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
    - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
    - cd $GOPATH/src/$REPO_NAME
  script:
    - go test $(go list ./... | grep -v /vendor/) -v -coverprofile .testCoverage.txt
    - go tool cover -func=.testCoverage.txt

build-image:
  stage: build
  dependencies:
    - dependencies
  image: docker:17
  services:
    - docker:dind
  script:
    - echo $CI_REGISTRY
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build -t registry.gitlab.com/customer:${CI_COMMIT_SHA:0:8} .
    - docker push registry.gitlab.com/customer:${CI_COMMIT_SHA:0:8}
  when: manual